{
  "swagger"
:
  "2.0", "basePath"
:
  "/v1", "host": "169.46.84.233:8443", "schemes": ["https"], "tags"
:
  [{"name": "Entity Config"}, {"name": "Applications"}, {"name": "Scripting"}, {"name": "Usage"}, {"name": "Locations"}, {"name": "Access Control"}, {"name": "Entity Policies"}, {"name": "Entities"}, {"name": "Catalog"}, {"name": "Entity Sensors"}, {"name": "Server"}, {"name": "Version"}, {"name": "Logout"}, {"name": "Entity Policy Config"}, {"name": "Activities"}, {"name": "Entity Effectors"}, {"name": "API Documentation"}], "paths"
:
  {
    "/access"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Access Control"], "summary"
      :
        "Fetch access control summary", "description"
      :
        "", "operationId"
      :
        "get", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "$ref"
            :
              "#/definitions/AccessSummary"
            }
          }
        }
      }
    }
  ,
    "/access/locationProvisioningAllowed"
  :
    {
      "post"
    :
      {
        "tags"
      :
        ["Access Control"], "summary"
      :
        "Sets whether location provisioning is permitted (beta feature)", "description"
      :
        "", "operationId"
      :
        "locationProvisioningAllowed", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "allowed",
          "in": "query",
          "description": "Whether allowed or not",
          "required": true,
          "type": "boolean"
        }], "responses"
      :
        {
          "default"
        :
          {
            "description"
          :
            "successful operation"
          }
        }
      }
    }
  ,
    "/activities/{task}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Activities"], "summary"
      :
        "Fetch task details", "description"
      :
        "", "operationId"
      :
        "get", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{"name": "task", "in": "path", "description": "Task ID", "required": true, "type": "string"}], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "$ref"
            :
              "#/definitions/TaskSummary"
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Could not find task"
          }
        }
      }
    }
  ,
    "/activities/{task}/children"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Activities"], "summary"
      :
        "Fetch list of children tasks of this task", "description"
      :
        "", "operationId"
      :
        "children", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{"name": "task", "in": "path", "description": "Task ID", "required": true, "type": "string"}], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/TaskSummary"
              }
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Could not find task"
          }
        }
      }
    }
  ,
    "/activities/{task}/children/recurse"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Activities"], "summary"
      :
        "Fetch all child tasks details as Map<String,TaskSummary> map key == Task ID", "description"
      :
        "", "operationId"
      :
        "getAllChildrenAsMap", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{"name": "task", "in": "path", "description": "Task ID", "required": true, "type": "string"}], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "object", "additionalProperties"
            :
              {
                "type"
              :
                "object"
              }
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Could not find task"
          }
        }
      }
    }
  ,
    "/activities/{task}/stream/{streamId}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Activities"], "summary"
      :
        "Return the contents of the given stream", "description"
      :
        "", "operationId"
      :
        "stream", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "task",
          "in": "path",
          "description": "Task ID",
          "required": true,
          "type": "string"
        }, {
          "name": "streamId",
          "in": "path",
          "description": "Stream ID",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "string"
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Could not find task or stream"
          }
        }
      }
    }
  ,
    "/applications"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Applications"], "summary"
      :
        "Fetch list of applications, as ApplicationSummary objects", "description"
      :
        "", "operationId"
      :
        "list", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "typeRegex",
          "in": "query",
          "description": "Regular expression to filter by",
          "required": false,
          "type": "string",
          "default": ".*"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "$ref"
            :
              "#/definitions/ApplicationSummary"
            }
          }
        }
      }
    ,
      "post"
    :
      {
        "tags"
      :
        ["Applications"], "summary"
      :
        "Create and start a new application from form URL-encoded contents (underlying type autodetected)", "description"
      :
        "", "operationId"
      :
        "createFromForm", "consumes"
      :
        ["application/x-www-form-urlencoded"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "in": "body",
          "name": "applicationSpec",
          "description": "App spec in form-encoded YAML, JSON, or other (auto-detected) format",
          "required": true,
          "schema": {"type": "string"}
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "$ref"
            :
              "#/definitions/TaskSummary"
            }
          }
        ,
          "412"
        :
          {
            "description"
          :
            "Application already registered"
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Undefined entity or location"
          }
        }
      }
    }
  ,
    "/applications/createLegacy"
  :
    {
      "post"
    :
      {
        "tags"
      :
        ["Applications"], "summary"
      :
        "Create and start a new application from miscellaneous types, including JSON either new CAMP format or legacy AppSpec format", "description"
      :
        "", "operationId"
      :
        "create", "consumes"
      :
        ["application/json", "application/octet-stream", "text/plain"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {"$ref": "#/definitions/ApplicationSpec"}
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "$ref"
            :
              "#/definitions/TaskSummary"
            }
          }
        ,
          "412"
        :
          {
            "description"
          :
            "Application already registered"
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Undefined entity or location"
          }
        }
      ,
        "deprecated"
      :
        true
      }
    }
  ,
    "/applications/fetch"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Applications"], "summary"
      :
        "Fetch display details for all applications and optionally selected additional entities", "description"
      :
        "", "operationId"
      :
        "fetch", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "items",
          "in": "query",
          "description": "Selected additional entity ID's to include, comma-separated",
          "required": false,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/EntityDetail"
              }
            }
          }
        }
      }
    }
  ,
    "/applications/{application}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Applications"], "summary"
      :
        "Fetch a specific application", "description"
      :
        "", "operationId"
      :
        "get", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "ID or name of application whose details will be returned",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "$ref"
            :
              "#/definitions/ApplicationSummary"
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Application not found"
          }
        }
      }
    ,
      "delete"
    :
      {
        "tags"
      :
        ["Applications"], "summary"
      :
        "Delete a specified application", "description"
      :
        "", "operationId"
      :
        "delete", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application name",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "$ref"
            :
              "#/definitions/TaskSummary"
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Application not found"
          }
        }
      }
    }
  ,
    "/applications/{application}/descendants"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Applications"], "summary"
      :
        "Fetch entity info for all (or filtered) descendants", "description"
      :
        "", "operationId"
      :
        "getDescendants", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "typeRegex",
          "in": "query",
          "description": "Regular expression for an entity type which must be matched",
          "required": false,
          "type": "string",
          "default": ".*"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "$ref"
            :
              "#/definitions/EntitySummary"
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Application or entity missing"
          }
        }
      }
    }
  ,
    "/applications/{application}/descendants/sensor/{sensor}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Applications"], "summary"
      :
        "Fetch values of a given sensor for all (or filtered) descendants", "description"
      :
        "", "operationId"
      :
        "getDescendantsSensor", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "sensor",
          "in": "path",
          "description": "Sensor name",
          "required": true,
          "type": "string"
        }, {
          "name": "typeRegex",
          "in": "query",
          "description": "Regular expression for an entity type which must be matched",
          "required": false,
          "type": "string",
          "default": ".*"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "object", "additionalProperties"
            :
              {
                "type"
              :
                "object"
              }
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Application or entity missing"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entities"], "summary"
      :
        "Fetch the list of entities for a given application", "description"
      :
        "", "operationId"
      :
        "list", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/EntitySummary"
              }
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Application not found"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entities"], "summary"
      :
        "Fetch details about a specific application entity", "description"
      :
        "", "operationId"
      :
        "get", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "$ref"
            :
              "#/definitions/EntitySummary"
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Application or entity missing"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/activities"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entities"], "summary"
      :
        "Fetch list of tasks for this entity", "description"
      :
        "", "operationId"
      :
        "listTasks", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/TaskSummary"
              }
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Could not find application or entity"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/activities/{task}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entities"], "summary"
      :
        "Fetch task details", "description"
      :
        "", "operationId"
      :
        "getTask", "consumes"
      :
        ["application/json"], "produces"
      :
        ["text/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {"name": "task", "in": "path", "description": "Task ID", "required": true, "type": "string"}], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "$ref"
            :
              "#/definitions/TaskSummary"
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Could not find application, entity or task"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/children"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entities"], "summary"
      :
        "Fetch details about a specific application entity's children", "description"
      :
        "", "operationId"
      :
        "getChildren", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{"name": "application", "in": "path", "required": true, "type": "string"}, {
          "name": "entity",
          "in": "path",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "$ref"
            :
              "#/definitions/EntitySummary"
            }
          }
        }
      }
    ,
      "post"
    :
      {
        "tags"
      :
        ["Entities"], "summary"
      :
        "Add a child or children to this entity given a YAML spec", "description"
      :
        "", "operationId"
      :
        "addChildren", "consumes"
      :
        ["application/x-yaml", "text/yaml", "text/x-yaml", "application/yaml", "application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{"name": "application", "in": "path", "required": true, "type": "string"}, {
          "name": "entity",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "name": "start",
          "in": "query",
          "description": "Whether to automatically start this child; if omitted, true for Startable entities",
          "required": false,
          "type": "boolean"
        }, {
          "name": "timeout",
          "in": "query",
          "description": "Delay before server should respond with incomplete activity task, rather than completed task: 'never' means block until complete; '0' means return task immediately; and e.g. '20ms' (the default) will wait 20ms for completed task information to be available",
          "required": false,
          "type": "string",
          "default": "20ms"
        }, {
          "in": "body",
          "name": "childrenSpec",
          "description": "Entity spec in CAMP YAML format (including 'services' root element)",
          "required": true,
          "schema": {"type": "string"}
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "$ref"
            :
              "#/definitions/TaskSummary"
            }
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/config"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entity Config"], "summary"
      :
        "Fetch the config keys for a specific application entity", "description"
      :
        "", "operationId"
      :
        "list", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/ConfigSummary"
              }
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Could not find application or entity"
          }
        }
      }
    ,
      "post"
    :
      {
        "tags"
      :
        ["Entity Config"], "summary"
      :
        "Manually set multiple config values", "description"
      :
        "", "operationId"
      :
        "setFromMap", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "recurse",
          "in": "query",
          "description": "Apply the config to all pre-existing descendants",
          "required": false,
          "type": "boolean",
          "default": false
        }, {
          "in": "body",
          "name": "body",
          "description": "Map of config key names to values",
          "required": true,
          "schema": {"type": "object", "additionalProperties": {"type": "object"}}
        }], "responses"
      :
        {
          "404"
        :
          {
            "description"
          :
            "Could not find application or entity"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/config/current-state"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entity Config"], "summary"
      :
        "Fetch config key values in batch", "description"
      :
        "Returns a map of config name to value", "operationId"
      :
        "batchConfigRead", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "raw",
          "in": "query",
          "description": "Return raw config data instead of display values",
          "required": false,
          "type": "boolean",
          "default": false
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "object", "additionalProperties"
            :
              {
                "type"
              :
                "object"
              }
            }
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/config/{config}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entity Config"], "summary"
      :
        "Fetch config value (json)", "description"
      :
        "", "operationId"
      :
        "get", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "config",
          "in": "path",
          "description": "Config key ID",
          "required": true,
          "type": "string"
        }, {
          "name": "raw",
          "in": "query",
          "description": "Return raw config data instead of display values",
          "required": false,
          "type": "boolean",
          "default": false
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "object"
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Could not find application, entity or config key"
          }
        }
      }
    ,
      "post"
    :
      {
        "tags"
      :
        ["Entity Config"], "summary"
      :
        "Manually set a config value", "description"
      :
        "", "operationId"
      :
        "set", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "config",
          "in": "path",
          "description": "Config key name",
          "required": true,
          "type": "string"
        }, {
          "name": "recurse",
          "in": "query",
          "description": "Apply the config to all pre-existing descendants",
          "required": false,
          "type": "boolean",
          "default": false
        }, {
          "in": "body",
          "name": "body",
          "description": "Value to set",
          "required": false,
          "schema": {"type": "object"}
        }], "responses"
      :
        {
          "404"
        :
          {
            "description"
          :
            "Could not find application, entity or config key"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/descendants"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entities"], "summary"
      :
        "Fetch entity info for all (or filtered) descendants", "description"
      :
        "", "operationId"
      :
        "getDescendants", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "typeRegex",
          "in": "query",
          "description": "Regular expression for an entity type which must be matched",
          "required": false,
          "type": "string",
          "default": ".*"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "$ref"
            :
              "#/definitions/EntitySummary"
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Application or entity missing"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/descendants/sensor/{sensor}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entities"], "summary"
      :
        "Fetch values of a given sensor for all (or filtered) descendants", "description"
      :
        "", "operationId"
      :
        "getDescendantsSensor", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "sensor",
          "in": "path",
          "description": "Sensor name",
          "required": true,
          "type": "string"
        }, {
          "name": "typeRegex",
          "in": "query",
          "description": "Regular expression applied to filter descendant entities based on their type",
          "required": false,
          "type": "string",
          "default": ".*"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "object", "additionalProperties"
            :
              {
                "type"
              :
                "object"
              }
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Application or entity missing"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/effectors"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entity Effectors"], "summary"
      :
        "Fetch the list of effectors", "description"
      :
        "", "operationId"
      :
        "list", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity name",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/EffectorSummary"
              }
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Could not find application or entity"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/effectors/{effector}"
  :
    {
      "post"
    :
      {
        "tags"
      :
        ["Entity Effectors"], "summary"
      :
        "Trigger an effector", "description"
      :
        "Returns the return value (status 200) if it completes, or an activity task ID (status 202) if it times out", "operationId"
      :
        "invoke", "consumes"
      :
        ["application/json", "application/x-www-form-urlencoded"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "effector",
          "in": "path",
          "description": "Name of the effector to trigger",
          "required": true,
          "type": "string"
        }, {
          "name": "timeout",
          "in": "query",
          "description": "Delay before server should respond with activity task ID rather than result (in millis if no unit specified): 'never' (blocking) is default; '0' means 'always' return task activity ID; and e.g. '1000' or '1s' will return a result if available within one second otherwise status 202 and the activity task ID",
          "required": false,
          "type": "string",
          "default": "never"
        }, {
          "in": "body",
          "name": "parameters",
          "description": "Effector parameters (as key value pairs)",
          "required": false,
          "schema": {"type": "object", "additionalProperties": {"type": "object"}}
        }], "responses"
      :
        {
          "404"
        :
          {
            "description"
          :
            "Could not find application, entity or effector"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/expunge"
  :
    {
      "post"
    :
      {
        "tags"
      :
        ["Entities"], "summary"
      :
        "Expunge an entity", "description"
      :
        "", "operationId"
      :
        "expunge", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "release",
          "in": "query",
          "description": "Whether to gracefully release all resources",
          "required": true,
          "type": "boolean"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "$ref"
            :
              "#/definitions/TaskSummary"
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Undefined application or entity"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/icon"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entities"], "summary"
      :
        "Returns an icon for the entity, if defined", "description"
      :
        "", "operationId"
      :
        "getIcon", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{"name": "application", "in": "path", "required": true, "type": "string"}, {
          "name": "entity",
          "in": "path",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "default"
        :
          {
            "description"
          :
            "successful operation"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/locations"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entities"], "summary"
      :
        "List the locations set on the entity", "description"
      :
        "", "operationId"
      :
        "getLocations", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/LocationSummary"
              }
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Application or entity missing"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/name"
  :
    {
      "post"
    :
      {
        "tags"
      :
        ["Entities"], "summary"
      :
        "Rename an entity", "description"
      :
        "", "operationId"
      :
        "rename", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "New name for this entity",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "404"
        :
          {
            "description"
          :
            "Undefined application or entity"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/policies"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entity Policies"], "summary"
      :
        "Fetch the policies attached to a specific application entity", "description"
      :
        "", "operationId"
      :
        "list", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/PolicySummary"
              }
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Could not find application or entity"
          }
        }
      }
    ,
      "post"
    :
      {
        "tags"
      :
        ["Entity Policies"], "summary"
      :
        "Add a policy", "description"
      :
        "Returns a summary of the new policy", "operationId"
      :
        "addPolicy", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "policyType",
          "in": "query",
          "description": "Class of policy to add",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "config",
          "description": "Configuration for the policy (as key value pairs)",
          "required": true,
          "schema": {"type": "object", "additionalProperties": {"type": "string"}}
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "$ref"
            :
              "#/definitions/PolicySummary"
            }
          }
        ,
          "400"
        :
          {
            "description"
          :
            "Type is not a class implementing Policy"
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Could not find application or entity"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/policies/current-state"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entity Policies"], "summary"
      :
        "Fetch policy states in batch", "description"
      :
        "Returns a map of policy ID to whether it is active", "operationId"
      :
        "batchConfigRead", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "object", "additionalProperties"
            :
              {
                "type"
              :
                "boolean"
              }
            }
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/policies/{policy}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entity Policies"], "summary"
      :
        "Gets status of a policy (RUNNING / SUSPENDED)", "description"
      :
        "", "operationId"
      :
        "getStatus", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "policy",
          "in": "path",
          "description": "Policy ID or name",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "string", "enum"
            :
              ["ACCEPTED", "STARTING", "RUNNING", "STOPPING", "STOPPED", "DESTROYED", "ERROR", "UNKNOWN"]
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Could not find application, entity or policy"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/policies/{policy}/config"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entity Policy Config"], "summary"
      :
        "Fetch the config keys for a specific policy", "description"
      :
        "", "operationId"
      :
        "list", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "policy",
          "in": "path",
          "description": "Policy ID or name",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/ConfigSummary"
              }
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Could not find application or entity or policy"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/policies/{policy}/config/current-state"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entity Policy Config"], "summary"
      :
        "Fetch config key values in batch", "description"
      :
        "Returns a map of config name to value", "operationId"
      :
        "batchConfigRead", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "policy",
          "in": "path",
          "description": "Policy ID or name",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "object", "additionalProperties"
            :
              {
                "type"
              :
                "object"
              }
            }
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/policies/{policy}/config/{config}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entity Policy Config"], "summary"
      :
        "Fetch config value", "description"
      :
        "", "operationId"
      :
        "get", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "policy",
          "in": "path",
          "description": "Policy ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "config",
          "in": "path",
          "description": "Config key ID",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "object"
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Could not find application, entity, policy or config key"
          }
        }
      }
    ,
      "post"
    :
      {
        "tags"
      :
        ["Entity Policy Config"], "summary"
      :
        "Sets the given config on this policy", "description"
      :
        "", "operationId"
      :
        "set", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "policy",
          "in": "path",
          "description": "Policy ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "config",
          "in": "path",
          "description": "Config key ID",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "value",
          "description": "New value for the configuration",
          "required": true,
          "schema": {"type": "object"}
        }], "responses"
      :
        {
          "404"
        :
          {
            "description"
          :
            "Could not find application, entity, policy or config key"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/policies/{policy}/config/{config}/set"
  :
    {
      "post"
    :
      {
        "tags"
      :
        ["Entity Policy Config"], "summary"
      :
        "Sets the given config on this policy", "description"
      :
        "", "operationId"
      :
        "set", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "policy",
          "in": "path",
          "description": "Policy ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "config",
          "in": "path",
          "description": "Config key ID",
          "required": true,
          "type": "string"
        }, {
          "name": "value",
          "in": "query",
          "description": "New value for the configuration",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "404"
        :
          {
            "description"
          :
            "Could not find application, entity, policy or config key"
          }
        }
      ,
        "deprecated"
      :
        true
      }
    }
  ,
    "/applications/{application}/entities/{entity}/policies/{policy}/destroy"
  :
    {
      "post"
    :
      {
        "tags"
      :
        ["Entity Policies"], "summary"
      :
        "Destroy a policy", "description"
      :
        "Removes a policy from being associated with the entity and destroys it (stopping first if running)", "operationId"
      :
        "destroy", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "policy",
          "in": "path",
          "description": "Policy ID or name",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "404"
        :
          {
            "description"
          :
            "Could not find application, entity or policy"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/policies/{policy}/start"
  :
    {
      "post"
    :
      {
        "tags"
      :
        ["Entity Policies"], "summary"
      :
        "Start or resume a policy", "description"
      :
        "", "operationId"
      :
        "start", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "policy",
          "in": "path",
          "description": "Policy ID or name",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "404"
        :
          {
            "description"
          :
            "Could not find application, entity or policy"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/policies/{policy}/stop"
  :
    {
      "post"
    :
      {
        "tags"
      :
        ["Entity Policies"], "summary"
      :
        "Suspends a policy", "description"
      :
        "", "operationId"
      :
        "stop", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "policy",
          "in": "path",
          "description": "Policy ID or name",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "404"
        :
          {
            "description"
          :
            "Could not find application, entity or policy"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/sensors"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entity Sensors"], "summary"
      :
        "Fetch the sensor list for a specific application entity", "description"
      :
        "", "operationId"
      :
        "list", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/SensorSummary"
              }
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Could not find application or entity"
          }
        }
      }
    ,
      "post"
    :
      {
        "tags"
      :
        ["Entity Sensors"], "summary"
      :
        "Manually set multiple sensor values", "description"
      :
        "", "operationId"
      :
        "setFromMap", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "description": "Map of sensor names to values",
          "required": true,
          "schema": {"type": "object", "additionalProperties": {"type": "object"}}
        }], "responses"
      :
        {
          "404"
        :
          {
            "description"
          :
            "Could not find application or entity"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/sensors/current-state"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entity Sensors"], "summary"
      :
        "Fetch sensor values in batch", "description"
      :
        "Returns a map of sensor name to value", "operationId"
      :
        "batchSensorRead", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "raw",
          "in": "query",
          "description": "Return raw sensor data instead of display values",
          "required": false,
          "type": "boolean",
          "default": false
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "object", "additionalProperties"
            :
              {
                "type"
              :
                "object"
              }
            }
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/sensors/{sensor}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entity Sensors"], "summary"
      :
        "Fetch sensor value (json)", "description"
      :
        "", "operationId"
      :
        "get", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "sensor",
          "in": "path",
          "description": "Sensor name",
          "required": true,
          "type": "string"
        }, {
          "name": "raw",
          "in": "query",
          "description": "Return raw sensor data instead of display values",
          "required": false,
          "type": "boolean",
          "default": false
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "object"
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Could not find application, entity or sensor"
          }
        }
      }
    ,
      "post"
    :
      {
        "tags"
      :
        ["Entity Sensors"], "summary"
      :
        "Manually set a sensor value", "description"
      :
        "", "operationId"
      :
        "set", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "sensor",
          "in": "path",
          "description": "Sensor name",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "description": "Value to set",
          "required": false,
          "schema": {"type": "object"}
        }], "responses"
      :
        {
          "404"
        :
          {
            "description"
          :
            "Could not find application, entity or sensor"
          }
        }
      }
    ,
      "delete"
    :
      {
        "tags"
      :
        ["Entity Sensors"], "summary"
      :
        "Manually clear a sensor value", "description"
      :
        "", "operationId"
      :
        "delete", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "sensor",
          "in": "path",
          "description": "Sensor name",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "404"
        :
          {
            "description"
          :
            "Could not find application, entity or sensor"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/spec"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entities"], "summary"
      :
        "Get the YAML spec used to create the entity, if available", "description"
      :
        "", "operationId"
      :
        "getSpec", "consumes"
      :
        ["application/json"], "produces"
      :
        ["text/x-yaml", "application/x-yaml", "text/yaml", "text/plain", "application/yaml"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "string"
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Application or entity missing"
          }
        }
      }
    }
  ,
    "/applications/{application}/entities/{entity}/tags"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Entities"], "summary"
      :
        "Fetch list of tags on this entity", "description"
      :
        "", "operationId"
      :
        "listTags", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application ID or name",
          "required": true,
          "type": "string"
        }, {
          "name": "entity",
          "in": "path",
          "description": "Entity ID or name",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "type"
              :
                "object"
              }
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Could not find application or entity"
          }
        }
      }
    }
  ,
    "/catalog"
  :
    {
      "post"
    :
      {
        "tags"
      :
        ["Catalog"], "summary"
      :
        "Add a catalog item (e.g. new type of entity, policy or location) by uploading YAML descriptor Return value is map of ID to CatalogItemSummary, with code 201 CREATED.", "description"
      :
        "", "operationId"
      :
        "create", "consumes"
      :
        ["*/*"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "in": "body",
          "name": "yaml",
          "description": "YAML descriptor of catalog item",
          "required": true,
          "schema": {"type": "string"}
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "string"
            }
          }
        }
      }
    }
  ,
    "/catalog/applications"
  :
    {
      "get":
      {
        "tags"
      :
        ["Catalog"], "summary"
      :
        "Fetch a list of application templates optionally matching a query", "description"
      :
        "", "operationId":
        "listApplications", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "regex",
          "in": "query",
          "description": "Regular expression to search for",
          "required": false,
          "type": "string"
        }, {
          "name": "fragment",
          "in": "query",
          "description": "Substring case-insensitive to search for",
          "required": false,
          "type": "string"
        }, {
          "name": "allVersions",
          "in": "query",
          "description": "Include all versions (defaults false, only returning the best version)",
          "required": false,
          "type": "boolean",
          "default": false
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/CatalogItemSummary"
              }
            }
          }
        }
      }
    }
  ,
    "/catalog/applications/{applicationId}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Catalog"], "summary"
      :
        "Fetch a specific version of an application's definition from the catalog", "description"
      :
        "", "operationId"
      :
        "getApplication_0_7_0", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "applicationId",
          "in": "path",
          "description": "The ID of the application to retrieve",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/CatalogEntitySummary"
              }
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Entity not found"
          }
        }
      ,
        "deprecated"
      :
        true
      }
    }
  ,
    "/catalog/applications/{symbolicName}/{version}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Catalog"], "summary"
      :
        "Fetch a specific version of an application's definition from the catalog", "description"
      :
        "", "operationId"
      :
        "getApplication", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "symbolicName",
          "in": "path",
          "description": "The symbolic name of the application to retrieve",
          "required": true,
          "type": "string"
        }, {
          "name": "version",
          "in": "path",
          "description": "The version identifier of the application to retrieve",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/CatalogEntitySummary"
              }
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Entity not found"
          }
        }
      }
    ,
      "delete"
    :
      {
        "tags"
      :
        ["Catalog"], "summary"
      :
        "Deletes a specific version of an application's definition from the catalog", "description"
      :
        "", "operationId"
      :
        "deleteApplication", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "symbolicName",
          "in": "path",
          "description": "The symbolic name of the application or template to delete",
          "required": true,
          "type": "string"
        }, {
          "name": "version",
          "in": "path",
          "description": "The version identifier of the application or template to delete",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "404"
        :
          {
            "description"
          :
            "Entity not found"
          }
        }
      }
    }
  ,
    "/catalog/entities"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Catalog"], "summary"
      :
        "List available entity types optionally matching a query", "description"
      :
        "", "operationId"
      :
        "listEntities", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "regex",
          "in": "query",
          "description": "Regular expression to search for",
          "required": false,
          "type": "string"
        }, {
          "name": "fragment",
          "in": "query",
          "description": "Substring case-insensitive to search for",
          "required": false,
          "type": "string"
        }, {
          "name": "allVersions",
          "in": "query",
          "description": "Include all versions (defaults false, only returning the best version)",
          "required": false,
          "type": "boolean",
          "default": false
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/CatalogItemSummary"
              }
            }
          }
        }
      }
    }
  ,
    "/catalog/entities/{entityId}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Catalog"], "summary"
      :
        "Fetch an entity's definition from the catalog", "description"
      :
        "", "operationId"
      :
        "getEntity_0_7_0", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "entityId",
          "in": "path",
          "description": "The ID of the entity or template to retrieve",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/CatalogEntitySummary"
              }
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Entity not found"
          }
        }
      ,
        "deprecated"
      :
        true
      }
    ,
      "delete"
    :
      {
        "tags"
      :
        ["Catalog"], "summary"
      :
        "Deletes a specific version of an entity's definition from the catalog", "description"
      :
        "", "operationId"
      :
        "deleteEntity_0_7_0", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "entityId",
          "in": "path",
          "description": "The ID of the entity or template to delete",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "404"
        :
          {
            "description"
          :
            "Entity not found"
          }
        }
      ,
        "deprecated"
      :
        true
      }
    }
  ,
    "/catalog/entities/{itemId}/deprecated"
  :
    {
      "post"
    :
      {
        "tags"
      :
        ["Catalog"], "operationId"
      :
        "setDeprecated", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "itemId",
          "in": "path",
          "description": "The ID of the catalog item to be deprecated",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "deprecated",
          "description": "Whether or not the catalog item is deprecated",
          "required": true,
          "schema": {"type": "boolean"}
        }], "responses"
      :
        {
          "404"
        :
          {
            "description"
          :
            "Undefined catalog item"
          }
        }
      }
    }
  ,
    "/catalog/entities/{itemId}/deprecated/{deprecated}"
  :
    {
      "post"
    :
      {
        "tags"
      :
        ["Catalog"], "operationId"
      :
        "setDeprecatedLegacy", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "itemId",
          "in": "path",
          "description": "The ID of the catalog item to be deprecated",
          "required": true,
          "type": "string"
        }, {
          "name": "deprecated",
          "in": "path",
          "description": "Whether or not the catalog item is deprecated",
          "required": true,
          "type": "boolean"
        }], "responses"
      :
        {
          "default"
        :
          {
            "description"
          :
            "successful operation"
          }
        }
      ,
        "deprecated"
      :
        true
      }
    }
  ,
    "/catalog/entities/{itemId}/disabled"
  :
    {
      "post"
    :
      {
        "tags"
      :
        ["Catalog"], "operationId"
      :
        "setDisabled", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "itemId",
          "in": "path",
          "description": "The ID of the catalog item to be disabled",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "disabled",
          "description": "Whether or not the catalog item is disabled",
          "required": true,
          "schema": {"type": "boolean"}
        }], "responses"
      :
        {
          "404"
        :
          {
            "description"
          :
            "Undefined catalog item"
          }
        }
      }
    }
  ,
    "/catalog/entities/{symbolicName}/{version}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Catalog"], "summary"
      :
        "Fetch a specific version of an entity's definition from the catalog", "description"
      :
        "", "operationId"
      :
        "getEntity", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "symbolicName",
          "in": "path",
          "description": "The symbolic name of the entity or template to retrieve",
          "required": true,
          "type": "string"
        }, {
          "name": "version",
          "in": "path",
          "description": "The version identifier of the entity or template to retrieve",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/CatalogEntitySummary"
              }
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Entity not found"
          }
        }
      }
    ,
      "delete"
    :
      {
        "tags"
      :
        ["Catalog"], "summary"
      :
        "Deletes a specific version of an entity's definition from the catalog", "description"
      :
        "", "operationId"
      :
        "deleteEntity", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "symbolicName",
          "in": "path",
          "description": "The symbolic name of the entity or template to delete",
          "required": true,
          "type": "string"
        }, {
          "name": "version",
          "in": "path",
          "description": "The version identifier of the entity or template to delete",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "404"
        :
          {
            "description"
          :
            "Entity not found"
          }
        }
      }
    }
  ,
    "/catalog/icon/{itemId}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Catalog"], "summary"
      :
        "Return the icon for a given catalog entry (application/image or HTTP redirect)", "description"
      :
        "", "operationId"
      :
        "getIcon_0_7_0", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/image"], "parameters"
      :
        [{
          "name": "itemId",
          "in": "path",
          "description": "ID of catalog item (application, entity, policy, location)",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "404"
        :
          {
            "description"
          :
            "Item not found"
          }
        }
      ,
        "deprecated"
      :
        true
      }
    }
  ,
    "/catalog/icon/{itemId}/{version}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Catalog"], "summary"
      :
        "Return the icon for a given catalog entry (application/image or HTTP redirect)", "description"
      :
        "", "operationId"
      :
        "getIcon", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/image"], "parameters"
      :
        [{
          "name": "itemId",
          "in": "path",
          "description": "ID of catalog item (application, entity, policy, location)",
          "required": true,
          "type": "string"
        }, {
          "name": "version",
          "in": "path",
          "description": "version identifier of catalog item (application, entity, policy, location)",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "404"
        :
          {
            "description"
          :
            "Item not found"
          }
        }
      }
    }
  ,
    "/catalog/locations"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Catalog"], "summary"
      :
        "List available locations optionally matching a query", "description"
      :
        "", "operationId"
      :
        "listLocations", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "regex",
          "in": "query",
          "description": "Regular expression to search for",
          "required": false,
          "type": "string"
        }, {
          "name": "fragment",
          "in": "query",
          "description": "Substring case-insensitive to search for",
          "required": false,
          "type": "string"
        }, {
          "name": "allVersions",
          "in": "query",
          "description": "Include all versions (defaults false, only returning the best version)",
          "required": false,
          "type": "boolean",
          "default": false
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/CatalogLocationSummary"
              }
            }
          }
        }
      }
    }
  ,
    "/catalog/locations/{locationId}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Catalog"], "summary"
      :
        "Fetch a location's definition from the catalog", "description"
      :
        "", "operationId"
      :
        "getLocation_0_7_0", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "locationId",
          "in": "path",
          "description": "The ID of the location to retrieve",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/CatalogItemSummary"
              }
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Entity not found"
          }
        }
      ,
        "deprecated"
      :
        true
      }
    }
  ,
    "/catalog/locations/{locationId}/{version}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Catalog"], "summary"
      :
        "Fetch a location's definition from the catalog", "description"
      :
        "", "operationId"
      :
        "getLocation", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "locationId",
          "in": "path",
          "description": "The ID of the location to retrieve",
          "required": true,
          "type": "string"
        }, {
          "name": "version",
          "in": "path",
          "description": "The version identifier of the application to retrieve",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/CatalogItemSummary"
              }
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Entity not found"
          }
        }
      }
    ,
      "delete"
    :
      {
        "tags"
      :
        ["Catalog"], "summary"
      :
        "Deletes a specific version of an location's definition from the catalog", "description"
      :
        "", "operationId"
      :
        "deleteLocation", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "locationId",
          "in": "path",
          "description": "The ID of the location to delete",
          "required": true,
          "type": "string"
        }, {
          "name": "version",
          "in": "path",
          "description": "The version identifier of the location to delete",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "404"
        :
          {
            "description"
          :
            "Location not found"
          }
        }
      }
    }
  ,
    "/catalog/policies"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Catalog"], "summary"
      :
        "List available policies optionally matching a query", "description"
      :
        "", "operationId"
      :
        "listPolicies", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "regex",
          "in": "query",
          "description": "Regular expression to search for",
          "required": false,
          "type": "string"
        }, {
          "name": "fragment",
          "in": "query",
          "description": "Substring case-insensitive to search for",
          "required": false,
          "type": "string"
        }, {
          "name": "allVersions",
          "in": "query",
          "description": "Include all versions (defaults false, only returning the best version)",
          "required": false,
          "type": "boolean",
          "default": false
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/CatalogPolicySummary"
              }
            }
          }
        }
      }
    }
  ,
    "/catalog/policies/{policyId}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Catalog"], "summary"
      :
        "Fetch a policy's definition from the catalog", "description"
      :
        "", "operationId"
      :
        "getPolicy_0_7_0", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "policyId",
          "in": "path",
          "description": "The ID of the policy to retrieve",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/CatalogItemSummary"
              }
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Entity not found"
          }
        }
      ,
        "deprecated"
      :
        true
      }
    }
  ,
    "/catalog/policies/{policyId}/{version}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Catalog"], "summary"
      :
        "Fetch a policy's definition from the catalog", "description"
      :
        "", "operationId"
      :
        "getPolicy", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "policyId",
          "in": "path",
          "description": "The ID of the policy to retrieve",
          "required": true,
          "type": "string"
        }, {
          "name": "version",
          "in": "path",
          "description": "The version identifier of the application to retrieve",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/CatalogItemSummary"
              }
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Entity not found"
          }
        }
      }
    ,
      "delete"
    :
      {
        "tags"
      :
        ["Catalog"], "summary"
      :
        "Deletes a specific version of an policy's definition from the catalog", "description"
      :
        "", "operationId"
      :
        "deletePolicy", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "policyId",
          "in": "path",
          "description": "The ID of the policy to delete",
          "required": true,
          "type": "string"
        }, {
          "name": "version",
          "in": "path",
          "description": "The version identifier of the policy to delete",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "404"
        :
          {
            "description"
          :
            "Policy not found"
          }
        }
      }
    }
  ,
    "/catalog/reset"
  :
    {
      "post"
    :
      {
        "tags"
      :
        ["Catalog"], "summary"
      :
        "Resets the catalog to the given (XML) format", "description"
      :
        "", "operationId"
      :
        "resetXml", "consumes"
      :
        ["application/xml"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "in": "body",
          "name": "xml",
          "description": "XML descriptor of the entire catalog to install",
          "required": true,
          "schema": {"type": "string"}
        }, {
          "name": "ignoreErrors",
          "in": "query",
          "description": "Don't fail on invalid bundles, log the errors only",
          "required": false,
          "type": "boolean",
          "default": false
        }], "responses"
      :
        {
          "default"
        :
          {
            "description"
          :
            "successful operation"
          }
        }
      }
    }
  ,
    "/locations"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Locations"], "summary"
      :
        "Fetch the list of location definitions", "description"
      :
        "", "operationId"
      :
        "list", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/LocationSummary"
              }
            }
          }
        }
      ,
        "deprecated"
      :
        true
      }
    ,
      "post"
    :
      {
        "tags"
      :
        ["Locations"], "summary"
      :
        "Create a new location definition", "description"
      :
        "", "operationId"
      :
        "create", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "in": "body",
          "name": "locationSpec",
          "description": "Location specification object",
          "required": true,
          "schema": {"$ref": "#/definitions/LocationSpec"}
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "string"
            }
          }
        }
      ,
        "deprecated"
      :
        true
      }
    }
  ,
    "/locations/usage/LocatedLocations"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Locations"], "summary"
      :
        "Return a summary of all usage", "description"
      :
        "interim API, expected to change", "operationId"
      :
        "getLocatedLocations", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "object", "additionalProperties"
            :
              {
                "type"
              :
                "object", "additionalProperties"
              :
                {
                  "type"
                :
                  "object"
                }
              }
            }
          }
        }
      }
    }
  ,
    "/locations/{locationId}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Locations"], "summary"
      :
        "Fetch details about a location instance, or a location definition", "description"
      :
        "", "operationId"
      :
        "get", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "locationId",
          "in": "path",
          "description": "Location id to fetch",
          "required": true,
          "type": "string"
        }, {
          "name": "full",
          "in": "query",
          "description": "Whether full (inherited) config should be compiled",
          "required": false,
          "type": "string",
          "default": "false"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "$ref"
              :
                "#/definitions/LocationSummary"
              }
            }
          }
        }
      }
    ,
      "delete"
    :
      {
        "tags"
      :
        ["Locations"], "summary"
      :
        "Deletes a location definition by id", "description"
      :
        "", "operationId"
      :
        "delete", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "locationId",
          "in": "path",
          "description": "Location id to delete",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "default"
        :
          {
            "description"
          :
            "successful operation"
          }
        }
      ,
        "deprecated"
      :
        true
      }
    }
  ,
    "/logout"
  :
    {
      "post"
    :
      {
        "tags"
      :
        ["Logout"], "summary"
      :
        "Request a logout and clean session", "description"
      :
        "", "operationId"
      :
        "logout", "parameters"
      :
        [], "responses"
      :
        {
          "307"
        :
          {
            "description"
          :
            "Redirect to /logout/user, keeping the request method"
          }
        }
      }
    }
  ,
    "/logout/{user}"
  :
    {
      "post"
    :
      {
        "tags"
      :
        ["Logout"], "summary"
      :
        "Logout and clean session if matching user logged", "description"
      :
        "", "operationId"
      :
        "logoutUser", "parameters"
      :
        [{
          "name": "user",
          "in": "path",
          "description": "User to log out",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "default"
        :
          {
            "description"
          :
            "successful operation"
          }
        }
      }
    }
  ,
    "/script/groovy"
  :
    {
      "post"
    :
      {
        "tags"
      :
        ["Scripting"], "summary"
      :
        "Execute a groovy script", "description"
      :
        "", "operationId"
      :
        "groovy", "consumes"
      :
        ["application/text"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "in": "body",
          "name": "script",
          "description": "Groovy script to execute",
          "required": true,
          "schema": {"type": "string"}
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "$ref"
            :
              "#/definitions/SensorSummary"
            }
          }
        }
      }
    }
  ,
    "/server/config/{configKey}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Server"], "summary"
      :
        "Get the value of the specified config key from brooklyn properties", "description"
      :
        "", "operationId"
      :
        "getConfig", "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "configKey",
          "in": "path",
          "description": "Config key ID",
          "required": true,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "string"
            }
          }
        ,
          "204"
        :
          {
            "description"
          :
            "Could not find config key"
          }
        }
      }
    }
  ,
    "/server/ha/metrics"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Server"], "summary"
      :
        "Returns a collection of HA metrics", "description"
      :
        "", "operationId"
      :
        "getHighAvailabilityMetrics", "produces"
      :
        ["application/json"], "parameters"
      :
        [], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "object", "additionalProperties"
            :
              {
                "type"
              :
                "object"
              }
            }
          }
        }
      }
    }
  ,
    "/server/ha/persist/export"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Server"], "summary"
      :
        "Retrieves the persistence store data, as an archive", "description"
      :
        "", "operationId"
      :
        "exportPersistenceData", "produces"
      :
        ["application/zip"], "parameters"
      :
        [{
          "name": "origin",
          "in": "query",
          "description": "Whether to take from LOCAL or REMOTE state; default to AUTO detect, using LOCAL as master and REMOTE for other notes",
          "required": false,
          "type": "string",
          "default": "AUTO"
        }], "responses"
      :
        {
          "default"
        :
          {
            "description"
          :
            "successful operation"
          }
        }
      }
    }
  ,
    "/server/ha/priority"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Server"], "summary"
      :
        "Returns the HA node priority for MASTER failover", "description"
      :
        "", "operationId"
      :
        "getHighAvailabitlityPriority", "produces"
      :
        ["application/json"], "parameters"
      :
        [], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "integer", "format"
            :
              "int64"
            }
          }
        }
      }
    ,
      "post"
    :
      {
        "tags"
      :
        ["Server"], "summary"
      :
        "Sets the HA node priority for MASTER failover", "description"
      :
        "", "operationId"
      :
        "setHighAvailabilityPriority", "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "priority",
          "in": "formData",
          "description": "The priority to be set",
          "required": false,
          "type": "integer",
          "format": "int64"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "integer", "format"
            :
              "int64"
            }
          }
        }
      }
    }
  ,
    "/server/ha/state"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Server"], "summary"
      :
        "Returns the HA state of this management node", "description"
      :
        "", "operationId"
      :
        "getHighAvailabilityNodeState", "produces"
      :
        ["application/json"], "parameters"
      :
        [], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "string", "enum"
            :
              ["INITIALIZING", "STANDBY", "HOT_STANDBY", "HOT_BACKUP", "MASTER", "FAILED", "TERMINATED"]
            }
          }
        }
      }
    ,
      "post"
    :
      {
        "tags"
      :
        ["Server"], "summary"
      :
        "Changes the HA state of this management node", "description"
      :
        "", "operationId"
      :
        "setHighAvailabilityNodeState", "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "mode",
          "in": "formData",
          "description": "The state to change to",
          "required": false,
          "type": "string",
          "enum": ["DISABLED", "AUTO", "STANDBY", "HOT_STANDBY", "HOT_BACKUP", "MASTER"]
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "string", "enum"
            :
              ["INITIALIZING", "STANDBY", "HOT_STANDBY", "HOT_BACKUP", "MASTER", "FAILED", "TERMINATED"]
            }
          }
        }
      }
    }
  ,
    "/server/ha/states"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Server"], "summary"
      :
        "Returns the HA states and detail for all nodes in this management plane", "description"
      :
        "", "operationId"
      :
        "getHighAvailabilityPlaneStates", "produces"
      :
        ["application/json"], "parameters"
      :
        [], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "$ref"
            :
              "#/definitions/HighAvailabilitySummary"
            }
          }
        }
      }
    }
  ,
    "/server/ha/states/clear"
  :
    {
      "post"
    :
      {
        "tags"
      :
        ["Server"], "summary"
      :
        "Clears HA node information for non-master nodes; active nodes will repopulate and other records will be erased", "description"
      :
        "", "operationId"
      :
        "clearHighAvailabilityPlaneStates", "produces"
      :
        ["application/json"], "parameters"
      :
        [], "responses"
      :
        {
          "default"
        :
          {
            "description"
          :
            "successful operation"
          }
        }
      }
    }
  ,
    "/server/healthy"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Server"], "summary"
      :
        "Returns whether this node is healthy - fully started, not stopping, and no errors", "description"
      :
        "", "operationId"
      :
        "isHealthy", "produces"
      :
        ["application/json"], "parameters"
      :
        [], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "boolean"
            }
          }
        }
      }
    }
  ,
    "/server/highAvailability"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Server"], "summary"
      :
        "Returns the status of all Brooklyn instances in the management plane [DEPRECATED; see ../ha/states]", "description"
      :
        "", "operationId"
      :
        "getHighAvailability", "produces"
      :
        ["application/json"], "parameters"
      :
        [], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "$ref"
            :
              "#/definitions/HighAvailabilitySummary"
            }
          }
        }
      ,
        "deprecated"
      :
        true
      }
    }
  ,
    "/server/properties/reload"
  :
    {
      "post"
    :
      {
        "tags"
      :
        ["Server"], "summary"
      :
        "Reload brooklyn.properties", "description"
      :
        "", "operationId"
      :
        "reloadBrooklynProperties", "produces"
      :
        ["application/json"], "parameters"
      :
        [], "responses"
      :
        {
          "default"
        :
          {
            "description"
          :
            "successful operation"
          }
        }
      }
    }
  ,
    "/server/shutdown"
  :
    {
      "post"
    :
      {
        "tags"
      :
        ["Server"], "summary"
      :
        "Terminate this Brooklyn server instance", "description"
      :
        "", "operationId"
      :
        "shutdown", "consumes"
      :
        ["application/x-www-form-urlencoded"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "stopAppsFirst",
          "in": "formData",
          "description": "Whether to stop running applications before shutting down",
          "required": false,
          "type": "boolean",
          "default": false
        }, {
          "name": "forceShutdownOnError",
          "in": "formData",
          "description": "Force shutdown if apps fail to stop or timeout",
          "required": false,
          "type": "boolean",
          "default": false
        }, {
          "name": "shutdownTimeout",
          "in": "formData",
          "description": "A maximum delay to wait for apps to gracefully stop before giving up or forcibly exiting, 0 to wait infinitely",
          "required": false,
          "type": "string",
          "default": "20s"
        }, {
          "name": "requestTimeout",
          "in": "formData",
          "description": "Maximum time to block the request for the shutdown to finish, 0 to wait infinitely",
          "required": false,
          "type": "string",
          "default": "20s"
        }, {
          "name": "delayForHttpReturn",
          "in": "formData",
          "description": "The delay before exiting the process, to permit the REST response to be returned",
          "required": false,
          "type": "string",
          "default": "5s"
        }, {
          "name": "delayMillis",
          "in": "formData",
          "description": "Deprecated, analogous to delayForHttpReturn",
          "required": false,
          "type": "integer",
          "format": "int64"
        }], "responses"
      :
        {
          "default"
        :
          {
            "description"
          :
            "successful operation"
          }
        }
      }
    }
  ,
    "/server/shuttingDown"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Server"], "summary"
      :
        "Returns whether this server is shutting down", "description"
      :
        "", "operationId"
      :
        "isShuttingDown", "produces"
      :
        ["application/json"], "parameters"
      :
        [], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "boolean"
            }
          }
        }
      }
    }
  ,
    "/server/status"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Server"], "summary"
      :
        "Returns the status of this Brooklyn instance [DEPRECATED; see ../ha/state]", "description"
      :
        "", "operationId"
      :
        "getStatus", "produces"
      :
        ["application/json"], "parameters"
      :
        [], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "type"
              :
                "string"
              }
            }
          }
        }
      ,
        "deprecated"
      :
        true
      }
    }
  ,
    "/server/up"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Server"], "summary"
      :
        "Returns whether this server is up - fully started, and not stopping, though it may have errors", "description"
      :
        "", "operationId"
      :
        "isUp", "produces"
      :
        ["application/json"], "parameters"
      :
        [], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "boolean"
            }
          }
        }
      }
    }
  ,
    "/server/up/extended"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Server"], "summary"
      :
        "Returns extended server-up information, a map including up (/up), shuttingDown (/shuttingDown), healthy (/healthy), and ha (/ha/states) (qv)", "description"
      :
        "", "operationId"
      :
        "getUpExtended", "produces"
      :
        ["application/json"], "parameters"
      :
        [], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "object", "additionalProperties"
            :
              {
                "type"
              :
                "object"
              }
            }
          }
        }
      }
    }
  ,
    "/server/user"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Server"], "summary"
      :
        "Return user information for this Brooklyn instance", "description"
      :
        "", "operationId"
      :
        "getUser", "produces"
      :
        ["application/json"], "parameters"
      :
        [], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "type"
              :
                "string"
              }
            }
          }
        }
      }
    }
  ,
    "/server/version"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Server"], "summary"
      :
        "Return version identifier information for this Brooklyn instance", "description"
      :
        "", "operationId"
      :
        "getVersion", "produces"
      :
        ["application/json"], "parameters"
      :
        [], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "type"
              :
                "string"
              }
            }
          }
        }
      }
    }
  ,
    "/usage/applications"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Usage"], "summary"
      :
        "Retrieve usage information about all applications", "description"
      :
        "", "operationId"
      :
        "listApplicationsUsage", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "start",
          "in": "query",
          "description": "timestamp of start marker for usage reporting, in format UTC millis or yyyy-MM-dd'T'HH:mm:ssZ",
          "required": false,
          "type": "string"
        }, {
          "name": "end",
          "in": "query",
          "description": "timestamp of end marker for usage reporting in format UTC millis or yyyy-MM-dd'T'HH:mm:ssZ",
          "required": false,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "$ref"
            :
              "#/definitions/UsageStatistics"
            }
          }
        }
      }
    }
  ,
    "/usage/applications/{application}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Usage"], "summary"
      :
        "Retrieve usage information about a specified application", "description"
      :
        "", "operationId"
      :
        "getApplicationUsage", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "path",
          "description": "Application id",
          "required": true,
          "type": "string"
        }, {
          "name": "start",
          "in": "query",
          "description": "timestamp of start marker for usage reporting in format UTC millis or yyyy-MM-dd'T'HH:mm:ssZ",
          "required": false,
          "type": "string"
        }, {
          "name": "end",
          "in": "query",
          "description": "timestamp of end marker for usage reporting in format UTC millis or yyyy-MM-dd'T'HH:mm:ssZ",
          "required": false,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "$ref"
            :
              "#/definitions/UsageStatistics"
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Application not found"
          }
        }
      }
    }
  ,
    "/usage/machines"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Usage"], "summary"
      :
        "Retrieve usage information about all machine locations, optionally filtering for a specific application and/or time range", "description"
      :
        "", "operationId"
      :
        "listMachinesUsage", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "application",
          "in": "query",
          "description": "Application id",
          "required": false,
          "type": "string"
        }, {
          "name": "start",
          "in": "query",
          "description": "timestamp of start marker for usage reporting in format UTC millis or yyyy-MM-dd'T'HH:mm:ssZ",
          "required": false,
          "type": "string"
        }, {
          "name": "end",
          "in": "query",
          "description": "timestamp of end marker for usage reporting in format UTC millis or yyyy-MM-dd'T'HH:mm:ssZ",
          "required": false,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "$ref"
            :
              "#/definitions/UsageStatistics"
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Application not found"
          }
        }
      }
    }
  ,
    "/usage/machines/{machine}"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Usage"], "summary"
      :
        "Retrieve usage information about a specific machine location", "description"
      :
        "", "operationId"
      :
        "getMachineUsage", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [{
          "name": "machine",
          "in": "path",
          "description": "Machine id",
          "required": true,
          "type": "string"
        }, {
          "name": "start",
          "in": "query",
          "description": "timestamp of start marker for usage reporting in format UTC millis or yyyy-MM-dd'T'HH:mm:ssZ",
          "required": false,
          "type": "string"
        }, {
          "name": "end",
          "in": "query",
          "description": "timestamp of end marker for usage reporting in format UTC millis or yyyy-MM-dd'T'HH:mm:ssZ",
          "required": false,
          "type": "string"
        }], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "$ref"
            :
              "#/definitions/UsageStatistics"
            }
          }
        ,
          "404"
        :
          {
            "description"
          :
            "Machine not found"
          }
        }
      }
    }
  ,
    "/version"
  :
    {
      "get"
    :
      {
        "tags"
      :
        ["Version"], "summary"
      :
        "Return version identifier information for this Brooklyn instance; deprecated, use /server/version", "description"
      :
        "", "operationId"
      :
        "getVersion", "consumes"
      :
        ["application/json"], "produces"
      :
        ["application/json"], "parameters"
      :
        [], "responses"
      :
        {
          "200"
        :
          {
            "description"
          :
            "successful operation", "schema"
          :
            {
              "type"
            :
              "array", "items"
            :
              {
                "type"
              :
                "string"
              }
            }
          }
        }
      }
    }
  }
,
  "definitions"
:
  {
    "PolicySummary"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "id"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "name"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "catalogItemId"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "state"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true, "enum"
        :
          ["ACCEPTED", "STARTING", "RUNNING", "STOPPING", "STOPPED", "DESTROYED", "ERROR", "UNKNOWN"]
        }
      ,
        "links"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "type"
          :
            "string", "format"
          :
            "uri"
          }
        }
      }
    }
  ,
    "AccessSummary"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "locationProvisioningAllowed"
      :
        {
          "type"
        :
          "boolean", "readOnly"
        :
          true, "default"
        :
          false
        }
      ,
        "links"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "type"
          :
            "string", "format"
          :
            "uri"
          }
        }
      }
    }
  ,
    "EffectorSummary"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "name"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "returnType"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "parameters"
      :
        {
          "type"
        :
          "array", "readOnly"
        :
          true, "uniqueItems"
        :
          true, "items"
        :
          {
            "$ref"
          :
            "#/definitions/ParameterSummaryObject"
          }
        }
      ,
        "description"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "links"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "type"
          :
            "string", "format"
          :
            "uri"
          }
        }
      }
    }
  ,
    "UsageStatistics"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "statistics"
      :
        {
          "type"
        :
          "array", "readOnly"
        :
          true, "items"
        :
          {
            "$ref"
          :
            "#/definitions/UsageStatistic"
          }
        }
      ,
        "links"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "type"
          :
            "string", "format"
          :
            "uri"
          }
        }
      }
    }
  ,
    "CatalogLocationSummary"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "symbolicName"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "version"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "name"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "javaType"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "planYaml"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "description"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "iconUrl"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "config"
      :
        {
          "type"
        :
          "array", "readOnly"
        :
          true, "uniqueItems"
        :
          true, "items"
        :
          {
            "$ref"
          :
            "#/definitions/LocationConfigSummary"
          }
        }
      ,
        "tags"
      :
        {
          "type"
        :
          "array", "readOnly"
        :
          true, "items"
        :
          {
            "type"
          :
            "object"
          }
        }
      ,
        "deprecated"
      :
        {
          "type"
        :
          "boolean", "readOnly"
        :
          true, "default"
        :
          false
        }
      ,
        "links"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "type"
          :
            "string", "format"
          :
            "uri"
          }
        }
      ,
        "id"
      :
        {
          "type"
        :
          "string"
        }
      ,
        "type"
      :
        {
          "type"
        :
          "string"
        }
      }
    }
  ,
    "ApplicationSummary"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "id"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "spec"
      :
        {
          "readOnly"
        :
          true, "$ref"
        :
          "#/definitions/ApplicationSpec"
        }
      ,
        "status"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true, "enum"
        :
          ["ACCEPTED", "STARTING", "RUNNING", "STOPPING", "STOPPED", "DESTROYED", "ERROR", "UNKNOWN"]
        }
      ,
        "links"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "type"
          :
            "string", "format"
          :
            "uri"
          }
        }
      }
    }
  ,
    "LocationConfigSummary"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "name"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "type"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "description"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "defaultValue"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true
        }
      ,
        "reconfigurable"
      :
        {
          "type"
        :
          "boolean", "readOnly"
        :
          true, "default"
        :
          false
        }
      ,
        "label"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "priority"
      :
        {
          "type"
        :
          "number", "format"
        :
          "double", "readOnly"
        :
          true
        }
      ,
        "possibleValues"
      :
        {
          "type"
        :
          "array", "readOnly"
        :
          true, "items"
        :
          {
            "type"
          :
            "object", "additionalProperties"
          :
            {
              "type"
            :
              "string"
            }
          }
        }
      ,
        "links"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "type"
          :
            "string", "format"
          :
            "uri"
          }
        }
      }
    }
  ,
    "ParameterSummaryObject"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "name"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "type"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "description"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "defaultValue"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true
        }
      }
    }
  ,
    "CatalogPolicySummary"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "symbolicName"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "version"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "name"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "javaType"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "planYaml"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "description"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "iconUrl"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "config"
      :
        {
          "type"
        :
          "array", "readOnly"
        :
          true, "uniqueItems"
        :
          true, "items"
        :
          {
            "$ref"
          :
            "#/definitions/PolicyConfigSummary"
          }
        }
      ,
        "tags"
      :
        {
          "type"
        :
          "array", "readOnly"
        :
          true, "items"
        :
          {
            "type"
          :
            "object"
          }
        }
      ,
        "deprecated"
      :
        {
          "type"
        :
          "boolean", "readOnly"
        :
          true, "default"
        :
          false
        }
      ,
        "links"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "type"
          :
            "string", "format"
          :
            "uri"
          }
        }
      ,
        "id"
      :
        {
          "type"
        :
          "string"
        }
      ,
        "type"
      :
        {
          "type"
        :
          "string"
        }
      }
    }
  ,
    "HighAvailabilitySummary"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "ownId"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "masterId"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "nodes"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "$ref"
          :
            "#/definitions/HaNodeSummary"
          }
        }
      ,
        "links"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "type"
          :
            "string", "format"
          :
            "uri"
          }
        }
      }
    }
  ,
    "EntityDetail"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "applicationId"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "id"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "parentId"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "name"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "type"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "serviceUp"
      :
        {
          "type"
        :
          "boolean", "readOnly"
        :
          true, "default"
        :
          false
        }
      ,
        "serviceState"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true, "enum"
        :
          ["CREATED", "STARTING", "RUNNING", "STOPPING", "STOPPED", "DESTROYED", "ON_FIRE"]
        }
      ,
        "iconUrl"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "catalogItemId"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "children"
      :
        {
          "type"
        :
          "array", "readOnly"
        :
          true, "items"
        :
          {
            "$ref"
          :
            "#/definitions/EntitySummary"
          }
        }
      ,
        "groupIds"
      :
        {
          "type"
        :
          "array", "readOnly"
        :
          true, "items"
        :
          {
            "type"
          :
            "string"
          }
        }
      ,
        "members"
      :
        {
          "type"
        :
          "array", "readOnly"
        :
          true, "items"
        :
          {
            "type"
          :
            "object", "additionalProperties"
          :
            {
              "type"
            :
              "string"
            }
          }
        }
      ,
        "links"
      :
        {
          "type"
        :
          "object", "additionalProperties"
        :
          {
            "type"
          :
            "string", "format"
          :
            "uri"
          }
        }
      }
    }
  ,
    "LocationSpec"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "name"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "spec"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "config"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "type"
          :
            "object"
          }
        }
      }
    }
  ,
    "CatalogItemSummary"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "symbolicName"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "version"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "name"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "javaType"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "planYaml"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "description"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "iconUrl"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "tags"
      :
        {
          "type"
        :
          "array", "readOnly"
        :
          true, "items"
        :
          {
            "type"
          :
            "object"
          }
        }
      ,
        "deprecated"
      :
        {
          "type"
        :
          "boolean", "readOnly"
        :
          true, "default"
        :
          false
        }
      ,
        "links"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "type"
          :
            "string", "format"
          :
            "uri"
          }
        }
      ,
        "id"
      :
        {
          "type"
        :
          "string"
        }
      ,
        "type"
      :
        {
          "type"
        :
          "string"
        }
      }
    }
  ,
    "ConfigSummary"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "name"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "type"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "description"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "defaultValue"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true
        }
      ,
        "reconfigurable"
      :
        {
          "type"
        :
          "boolean", "readOnly"
        :
          true, "default"
        :
          false
        }
      ,
        "label"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "priority"
      :
        {
          "type"
        :
          "number", "format"
        :
          "double", "readOnly"
        :
          true
        }
      ,
        "possibleValues"
      :
        {
          "type"
        :
          "array", "readOnly"
        :
          true, "items"
        :
          {
            "type"
          :
            "object", "additionalProperties"
          :
            {
              "type"
            :
              "string"
            }
          }
        }
      ,
        "links"
      :
        {
          "type"
        :
          "object", "additionalProperties"
        :
          {
            "type"
          :
            "string", "format"
          :
            "uri"
          }
        }
      }
    }
  ,
    "LocationSummary"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "id"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "name"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "spec"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "type"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "config"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "type"
          :
            "object"
          }
        }
      ,
        "catalog"
      :
        {
          "readOnly"
        :
          true, "$ref"
        :
          "#/definitions/CatalogLocationSummary"
        }
      ,
        "links"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "type"
          :
            "string", "format"
          :
            "uri"
          }
        }
      }
    }
  ,
    "SensorSummary"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "name"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "type"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "description"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "links"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "type"
          :
            "string", "format"
          :
            "uri"
          }
        }
      }
    }
  ,
    "LinkWithMetadata"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "link"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "metadata"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "type"
          :
            "object"
          }
        }
      }
    }
  ,
    "CatalogEntitySummary"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "symbolicName"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "version"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "name"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "javaType"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "planYaml"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "description"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "iconUrl"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "tags"
      :
        {
          "type"
        :
          "array", "readOnly"
        :
          true, "items"
        :
          {
            "type"
          :
            "object"
          }
        }
      ,
        "config"
      :
        {
          "type"
        :
          "array", "readOnly"
        :
          true, "uniqueItems"
        :
          true, "items"
        :
          {
            "$ref"
          :
            "#/definitions/EntityConfigSummary"
          }
        }
      ,
        "sensors"
      :
        {
          "type"
        :
          "array", "readOnly"
        :
          true, "uniqueItems"
        :
          true, "items"
        :
          {
            "$ref"
          :
            "#/definitions/SensorSummary"
          }
        }
      ,
        "effectors"
      :
        {
          "type"
        :
          "array", "readOnly"
        :
          true, "uniqueItems"
        :
          true, "items"
        :
          {
            "$ref"
          :
            "#/definitions/EffectorSummary"
          }
        }
      ,
        "deprecated"
      :
        {
          "type"
        :
          "boolean", "readOnly"
        :
          true, "default"
        :
          false
        }
      ,
        "links"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "type"
          :
            "string", "format"
          :
            "uri"
          }
        }
      ,
        "id"
      :
        {
          "type"
        :
          "string"
        }
      ,
        "type"
      :
        {
          "type"
        :
          "string"
        }
      }
    }
  ,
    "EntityConfigSummary"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "name"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "type"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "description"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "defaultValue"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true
        }
      ,
        "reconfigurable"
      :
        {
          "type"
        :
          "boolean", "readOnly"
        :
          true, "default"
        :
          false
        }
      ,
        "label"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "priority"
      :
        {
          "type"
        :
          "number", "format"
        :
          "double", "readOnly"
        :
          true
        }
      ,
        "possibleValues"
      :
        {
          "type"
        :
          "array", "readOnly"
        :
          true, "items"
        :
          {
            "type"
          :
            "object", "additionalProperties"
          :
            {
              "type"
            :
              "string"
            }
          }
        }
      ,
        "pinned"
      :
        {
          "type"
        :
          "boolean", "readOnly"
        :
          true, "default"
        :
          false
        }
      ,
        "constraints"
      :
        {
          "type"
        :
          "array", "readOnly"
        :
          true, "items"
        :
          {
            "type"
          :
            "string"
          }
        }
      ,
        "links"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "type"
          :
            "string", "format"
          :
            "uri"
          }
        }
      }
    }
  ,
    "HaNodeSummary"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "nodeId"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "nodeUri"
      :
        {
          "type"
        :
          "string", "format"
        :
          "uri", "readOnly"
        :
          true
        }
      ,
        "status"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "localTimestamp"
      :
        {
          "type"
        :
          "integer", "format"
        :
          "int64", "readOnly"
        :
          true
        }
      ,
        "remoteTimestamp"
      :
        {
          "type"
        :
          "integer", "format"
        :
          "int64", "readOnly"
        :
          true
        }
      }
    }
  ,
    "ApplicationSpec"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "name"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "type"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "entities"
      :
        {
          "type"
        :
          "array", "readOnly"
        :
          true, "uniqueItems"
        :
          true, "items"
        :
          {
            "$ref"
          :
            "#/definitions/EntitySpec"
          }
        }
      ,
        "locations"
      :
        {
          "type"
        :
          "array", "readOnly"
        :
          true, "uniqueItems"
        :
          true, "items"
        :
          {
            "type"
          :
            "string"
          }
        }
      ,
        "config"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "type"
          :
            "string"
          }
        }
      }
    }
  ,
    "EntitySpec"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "name"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "type"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "config"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "type"
          :
            "string"
          }
        }
      }
    }
  ,
    "EntitySummary"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "id"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "name"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "type"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "catalogItemId"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "links"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "type"
          :
            "string", "format"
          :
            "uri"
          }
        }
      }
    }
  ,
    "TaskSummary"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "id"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "displayName"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "description"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "entityId"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "entityDisplayName"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "tags"
      :
        {
          "type"
        :
          "array", "readOnly"
        :
          true, "items"
        :
          {
            "type"
          :
            "object"
          }
        }
      ,
        "submitTimeUtc"
      :
        {
          "type"
        :
          "integer", "format"
        :
          "int64", "readOnly"
        :
          true
        }
      ,
        "startTimeUtc"
      :
        {
          "type"
        :
          "integer", "format"
        :
          "int64", "readOnly"
        :
          true
        }
      ,
        "endTimeUtc"
      :
        {
          "type"
        :
          "integer", "format"
        :
          "int64", "readOnly"
        :
          true
        }
      ,
        "currentStatus"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "result"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true
        }
      ,
        "children"
      :
        {
          "type"
        :
          "array", "readOnly"
        :
          true, "items"
        :
          {
            "$ref"
          :
            "#/definitions/LinkWithMetadata"
          }
        }
      ,
        "submittedByTask"
      :
        {
          "readOnly"
        :
          true, "$ref"
        :
          "#/definitions/LinkWithMetadata"
        }
      ,
        "blockingTask"
      :
        {
          "readOnly"
        :
          true, "$ref"
        :
          "#/definitions/LinkWithMetadata"
        }
      ,
        "blockingDetails"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "detailedStatus"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "streams"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "$ref"
          :
            "#/definitions/LinkWithMetadata"
          }
        }
      ,
        "links"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "type"
          :
            "string", "format"
          :
            "uri"
          }
        }
      ,
        "cancelled"
      :
        {
          "type"
        :
          "boolean", "default"
        :
          false
        }
      ,
        "error"
      :
        {
          "type"
        :
          "boolean", "default"
        :
          false
        }
      }
    }
  ,
    "PolicyConfigSummary"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "name"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "type"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "description"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "defaultValue"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true
        }
      ,
        "reconfigurable"
      :
        {
          "type"
        :
          "boolean", "readOnly"
        :
          true, "default"
        :
          false
        }
      ,
        "links"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "type"
          :
            "string", "format"
          :
            "uri"
          }
        }
      ,
        "label"
      :
        {
          "type"
        :
          "string"
        }
      ,
        "priority"
      :
        {
          "type"
        :
          "number", "format"
        :
          "double"
        }
      ,
        "possibleValues"
      :
        {
          "type"
        :
          "array", "items"
        :
          {
            "type"
          :
            "object", "additionalProperties"
          :
            {
              "type"
            :
              "string"
            }
          }
        }
      }
    }
  ,
    "UsageStatistic"
  :
    {
      "type"
    :
      "object", "properties"
    :
      {
        "status"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true, "enum"
        :
          ["ACCEPTED", "STARTING", "RUNNING", "STOPPING", "STOPPED", "DESTROYED", "ERROR", "UNKNOWN"]
        }
      ,
        "id"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "applicationId"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "start"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "end"
      :
        {
          "type"
        :
          "string", "readOnly"
        :
          true
        }
      ,
        "duration"
      :
        {
          "type"
        :
          "integer", "format"
        :
          "int64", "readOnly"
        :
          true
        }
      ,
        "metadata"
      :
        {
          "type"
        :
          "object", "readOnly"
        :
          true, "additionalProperties"
        :
          {
            "type"
          :
            "string"
          }
        }
      }
    }
  }
}
